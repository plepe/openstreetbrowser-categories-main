query:
  10: |
    (way["parking:left"];way["parking:right"];way["parking:both"];)
feature:
  pre: |
    {% set leftType = attribute(tags, 'parking:left')|default(attribute(tags, 'parking:both'))|default('unknown') %}
    {% set rightType = attribute(tags, 'parking:right')|default(attribute(tags, 'parking:both'))|default('unknown') %}
    {% set leftOrientation = attribute(tags, 'parking:left:orientation')|default(attribute(tags, 'parking:both:orientation'))|default('unknown') %}
    {% set rightOrientation = attribute(tags, 'parking:right:orientation')|default(attribute(tags, 'parking:both:orientation'))|default('unknown') %}
  body: |
    Left: <ul>
      <li>Type: {{ leftType }}</li>
      {% if leftType not in ['no', 'separate'] %}
      <li>Orientation: {{ leftOrientation }}</li>
      {% endif %}
    </ul>
    Right: <ul>
      <li>Type: {{ rightType }}</li>
      {% if rightType not in ['no', 'separate'] %}
      <li>Orientation: {{ rightOrientation }}</li>
      {% endif %}
    </ul>
  markerSymbol: ''
  listMarkerSymbol: line
  details: |
    Left: {{ leftType }} / {{ leftOrientation }}<br>
    Right: {{ rightType }} / {{ rightOrientation }}
  styles: |
    default
    ,leftType
    ,rightType
    {% if leftType not in ['no', 'separate'] %}
      ,leftOrientation
    {% endif %}
    {% if rightType not in ['no', 'separate'] %}
      ,rightOrientation
    {% endif %}
  style:
    color: '#7f7f7f'
  style:leftType:
    color: red
    offset: |
      {{ 0 - ((const.orientation[leftOrientation].width) * const.type[leftType].kerbPosition + (const.type[leftType].width / 2) + 4) }}
    lineCap: butt
    width: |
      {{ const.type[leftType].width }}
    dashArray: |
      {{ const.type[leftType].dashArray }}
  style:leftOrientation:
    color: red
    offset: |
      {{ 0 - ((const.type[leftType].width) * (1 - const.type[leftType].kerbPosition) + const.orientation[leftOrientation].width / 2 + 4) }}
    lineCap: butt
    width: |
      {{ const.orientation[leftOrientation].width }}
    dashArray: |
      {{ const.orientation[leftOrientation].dashArray }}
  style:rightType:
    color: blue
    offset: |
      {{ (const.orientation[rightOrientation].width) * const.type[rightType].kerbPosition + (const.type[rightType].width / 2) + 4 }}
    lineCap: butt
    width: |
      {{ const.type[rightType].width }}
    dashArray: |
      {{ const.type[rightType].dashArray }}
  style:rightOrientation:
    color: blue
    offset: |
      {{ (const.type[rightType].width) * (1 - const.type[rightType].kerbPosition) + const.orientation[rightOrientation].width / 2 + 4 }}
    lineCap: butt
    width: |
      {{ const.orientation[rightOrientation].width }}
    dashArray: |
      {{ const.orientation[rightOrientation].dashArray }}
info: |
  Parking Type:
  <table>
  {% for k, def in const.type %}
    <tr>
      <td>{{ markerLine(evaluate({ 'parking:both': k, 'parking:both:orientation': 'parallel' })) }}</td>
      <td>{{ k }}</td>
    </tr>
  {% endfor %}
  </table>
  Parking Orientation:
  <table>
  {% for k, def in const.orientation %}
    <tr>
      <td>{{ markerLine(evaluate({ 'parking:both': 'lane', 'parking:both:orientation': k })) }}</td>
      <td>{{ k }}</td>
    </tr>
  {% endfor %}
  </table>
const:
  type:
    'no':
      width: 6
      dashArray: '6,10'
      kerbPosition: 0
    lane:
      width: 2
      dashArray: ''
      kerbPosition: 1
    street_side:
      width: 2
      dashArray: '5,5'
      kerbPosition: 1
    half_on_kerb:
      width: 2
      dashArray: ''
      kerbPosition: 0.5
    on_kerb:
      width: 2
      dashArray: ''
      kerbPosition: 0
    shoulder:
      width: 3
      dashArray: '5,5'
      kerbPosition: 0
    separate:
      width: 0
      dashArray: ''
      kerbPosition: 0
    unknown:
      width: 3
      dashArray: '1,1'
      kerbPosition: 0
  orientation:
    parallel:
      width: 5
      dashArray: '10,3'
    diagonal:
      width: 8
      dashArray: '5,5'
    perpendicular:
      width: 12
      dashArray: '3,3'
    unknown:
      width: 8
      dashArray: '1,1'
